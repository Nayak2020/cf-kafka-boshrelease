---
meta:
  name:    kafka
  # fly -t ohio-cf login -c https://ci2.starkandwayne.com -n cfcommunity
  target:  ohio-cf
  url:     https://ci2.starkandwayne.com

  initial_version: 1.0.0

  git:
    email:  ((git-commit-email))
    name:   ((git-commit-name))

  aws:
    bucket: (( grab meta.pipeline ))
    access_key: ((aws-cfcommunity-access))
    secret_key: ((aws-cfcommunity-secret))

  github:
    owner:  cloudfoundry-community
    repo:   (( concat meta.name "-boshrelease" ))
    branch: master
    private_key:  ((github-private-key))
    access_token: ((github-access-token))

  slack:
    webhook:  ((slack-webhook))
    icon:     ((slack-logo))
    username: ((slack-username))
    channel: '#bigdata-boshrelease'
    blob_success:  '(( concat "$BUILD_PIPELINE_NAME: New version of $BUILD_JOB_NAME was detected, and updated in master. <" meta.url "/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME| Cut a new release?>" ))'
    blob_failure:  '(( concat "$BUILD_PIPELINE_NAME: :airplane_arriving: <" meta.url "/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME| Failed to update the blob for $BUILD_JOB_NAME>" ))'

groups:
- name: blobs
  jobs:
  - kafka
- name: compiled-releases
  jobs:
    - (( append ))
    - bpm-compile-release
    - zookeeper-compile-release

jobs:
- name: kafka
  public: true
  plan:
  - { get: git }
  - { get: kafka, trigger: true }
  - task: update-blob
    config:
      image_resource:
        type: docker-image
        source:
          repository: (( grab meta.image.name ))
          tag:        (( grab meta.image.tag ))
      platform: linux
      inputs:
      - name: git
      - name: kafka
      outputs:
      - name: pushme
      run:
        path: ./git/ci/scripts/update-blob
      params:
        REPO_ROOT:   git
        REPO_OUT:    pushme
        BLOB_DIR:    kafka
        BLOB_NAME:   kafka
        BLOB_BINARY: kafka*.tgz
        BLOB_URL:    https://archive.apache.org/dist/kafka/
        BLOB_DESTINATION: kafka/kafka_2.12-${VERSION}.tgz
        BLOB_CLEANUP:     kafka/kafka_2.*
        AWS_ACCESS_KEY: (( grab meta.aws.access_key ))
        AWS_SECRET_KEY: (( grab meta.aws.secret_key ))
        BRANCH:         (( grab meta.github.branch ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_failure ))
  - put: git
    params:
      rebase: true
      repository: pushme/git
    on_success:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_success ))
    on_failure:
      put: notify
      params:
        channel:  (( grab meta.slack.channel ))
        username: (( grab meta.slack.username ))
        icon_url: (( grab meta.slack.icon ))
        text:     (( grab meta.slack.blob_failure ))

- name: use-compiled-releases
  plan:
    - name: resources
      in_parallel:
        steps:
          - (( append ))
          - get: bpm-compiled-release
            passed: [bpm-compile-release]
          - get: zookeeper-compiled-release
            passed: [zookeeper-compile-release]
    - task: use-compiled-releases
      config:
        inputs:
          - (( append ))
          - name: bpm-compiled-release
          - name: zookeeper-compiled-release

- name: bpm-compile-release
  public: true
  serial: true
  plan:
    - get: git
    - get: github
      resource: bpm-release
      trigger: true
    - get: (( concat meta.bosh.stemcell.os "-stemcell-" meta.bosh.stemcell.major ))
      params: {tarball: false}
    - task: export-release
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.name ))
            tag:        (( grab meta.image.tag ))
        inputs:
          - name: git
          - name: (( concat meta.bosh.stemcell.os "-stemcell-" meta.bosh.stemcell.major ))
            path: stemcell
          - name: github
            path: release
        outputs:
          - name: compiled-release
        run:
          path: git/ci/scripts/export-release
        params:
          BOSH_ENVIRONMENT:   (( grab meta.bosh.target ))
          BOSH_CA_CERT:       (( grab meta.bosh.cacert ))
          BOSH_CLIENT:        (( grab meta.bosh.username ))
          BOSH_CLIENT_SECRET: (( grab meta.bosh.password ))
    - put: bpm-compiled-release
      params:
        file: "compiled-release/compiled-releases/bpm/*.tgz"

- name: zookeeper-compile-release
  public: true
  serial: true
  plan:
    - get: git
    - get: github
      resource: zookeeper-boshrelease
      trigger: true
    - get: (( concat meta.bosh.stemcell.os "-stemcell-" meta.bosh.stemcell.major ))
      params: {tarball: false}
    - task: export-release
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.name ))
            tag:        (( grab meta.image.tag ))
        inputs:
          - name: git
          - name: (( concat meta.bosh.stemcell.os "-stemcell-" meta.bosh.stemcell.major ))
            path: stemcell
          - name: github
            path: release
        outputs:
          - name: compiled-release
        run:
          path: git/ci/scripts/export-release
        params:
          BOSH_ENVIRONMENT:   (( grab meta.bosh.target ))
          BOSH_CA_CERT:       (( grab meta.bosh.cacert ))
          BOSH_CLIENT:        (( grab meta.bosh.username ))
          BOSH_CLIENT_SECRET: (( grab meta.bosh.password ))
    - put: zookeeper-compiled-release
      params:
        file: "compiled-release/compiled-releases/zookeeper/*.tgz"

resource_types:
- name: apache-directory-index
  type: docker-image
  source:
    repository: mastertinner/apache-directory-index-resource
    tag: latest

resources:
- name: kafka
  type: apache-directory-index
  source:
    directory: https://archive.apache.org/dist/kafka/
    folder_pattern: $VERSION
    file_pattern: kafka_2.12-$VERSION.tgz

- name: bpm-release
  type: bosh-io-release
  source:
    repository: cloudfoundry-incubator/bpm-release

- name: bpm-compiled-release
  type: s3
  source:
    bucket:            (( grab meta.aws.bucket ))
    region_name:       (( grab meta.aws.region_name ))
    access_key_id:     (( grab meta.aws.access_key ))
    secret_access_key: (( grab meta.aws.secret_key ))
    regexp:            "compiled-releases/bpm/.*-(\\d+).tgz"

- name: zookeeper-boshrelease
  type: bosh-io-release
  source:
    repository: cppforlife/zookeeper-release

- name: zookeeper-compiled-release
  type: s3
  source:
    bucket:            (( grab meta.aws.bucket ))
    region_name:       (( grab meta.aws.region_name ))
    access_key_id:     (( grab meta.aws.access_key ))
    secret_access_key: (( grab meta.aws.secret_key ))
    regexp:            "compiled-releases/zookeeper/.*-(\\d+).tgz"
